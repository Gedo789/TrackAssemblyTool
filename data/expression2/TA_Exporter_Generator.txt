@name TA Exporter Generator
@inputs 
@outputs [Dev Chip Base]:entity [F Cen Prg]:vector Time Test PU PD
@persist Time DF StraightUp Interval TrackPieceW TrackRangerMaxW TrackPieceH TrackRangerMaxH TrackOriginInset TrackOriginTolerance
@persist [Cen Prg ORG F R U]:vector [Prop Mod]:string [Dev Chip Base]:entity ARC:array OutagePercentTolerance Test
@trigger none

interval(20)

function number isOuter(Lft, Rgh, Percent, MaxRange)
{
    Rez = 0
    T  = abs(Lft-Rgh)
    Pd = ((Percent / 100) * MaxRange)
    Pu = MaxRange - Pd
    if(T   > Pd){ Rez = 1 }
    if(Lft > Pu){ Rez = 1 }
    if(Rgh > Pu){ Rez = 1 }
   # print("isOuter "+Rez+" ["+round(T,2)+">"+round(Pd)+"] "+round(Lft,2)+">"+round(Pu)+"  "+round(Rgh,2)+">"+round(Pu,2))
    return Rez
}

function array clampTrace(Pos:vector,Width,Fwd:vector,Rgh:vector,Len,Holo1,Holo2)
{
    AL = Pos - Width * Rgh
    AR = Pos + Width * Rgh
    ARL = rangerOffset(Len,AL,  Rgh):distance()
    ARR = rangerOffset(Len,AR, -Rgh):distance()
    if(Holo1 > 0){ holoPos(Holo1,AL), holoAng(Holo1,Fwd:toAngle( Rgh)) }
    if(Holo2 > 0){ holoPos(Holo2,AR), holoAng(Holo2,Fwd:toAngle(-Rgh)) }
    ADRL = ((ARR - ARL) / 2)
    ADDW = ((Len - ARR - ARL) / 2)
    return array(ARR,ARL,ADRL,ADDW)
}

if(first() || dupefinished())
{   
    # What model to search for UP vector offset
    Prop = "models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl"
    
    # Set the Interval to be positive
    # Click to generate an active point
    Interval = 0
    
    # Outage %
    OutagePercentTolerance = 5
        
    # Set this delta forward to slow fasten the process
    DF = 0.5
    
    # Track piece width
    TrackPieceW = 50
    TrackPieceH = 20
        
    #Generate the origin with an inset
    TrackOriginInset = 0.001
    
    # Tolerance if the error gained when generating an actibe point
    TrackOriginTolerance = 10^-12
    
    Time = 0
    Chip = entity()
    CPos = Chip:pos()
    CAng = Chip:angles()
    F = sign(DF) * Chip:forward()
    U = Chip:up()
    R = F:cross(U)
    Base = Chip:isConstrainedTo("weld")
    Mod  = Base:model()
    No   = findByModel(Prop)
    Dev  = findClosest(Chip:massCenter())
    Dev:setColor(0,255,0,255)
    TrackRangerMaxW = TrackPieceW * 2
    TrackRangerMaxH = TrackPieceH * 2
     
    # Set to > 0 for straight rails and place it between the beams 
    # The angle must be [0,0,0]
    UpVec = Dev:pos() - CPos
    StraightUp = UpVec:dot(U)
    if(abs(StraightUp) > TrackPieceH)
    {
        ALR = clampTrace(CPos,TrackPieceH,F,U,TrackRangerMaxH,0,0), CR = ALR[1,number], CL = ALR[2,number]
        StraightUp = -(abs(TrackRangerMaxH - abs(CR + CL)) / 2)
        
        # If it's too deep can be adjusted manually
        StraightUp = -2
    } 
    DF = abs(DF)
    Interval = abs(Interval)
    
    if(Interval > 0)
    {
        # Change storage mode
        Mode = "INS"
        Type = "#"
        Name = "#"
        PID  = 2
        
        if(Mode == "DSV")
        {
            Del = "\t"
            P = "NULL"
            O = round(Base:toLocalAxis(Dev:pos() - Base:pos()),6)
            A = round(Dev:angles(),2)
            Ins = "TRACKASSEMBLY_PIECES"+Del+Mod+Del+Type+Del+Name+
                Del+toString(PID)+Del+P+Del+toString(O):replace("[",""):replace("]","")+
                Del+toString(A):replace("[",""):replace("]","")
        }
        elseif(Mode == "INS")
        {
            Del  = "\", \""
            P = ""
            A = round(Dev:angles(),2)
            O = round(Base:toLocalAxis(Dev:pos() - Base:pos()),6)
            Ins = "  asmlib.InsertRecord({\""+Mod+Del+Type+Del+Name+"\", "+PID+", \""+P+Del+toString(PID)+Del+P+
                Del+toString(O):replace("[",""):replace("]","")+
                Del+toString(A):replace("[",""):replace("]","")+"\"})"
        }
        print(_HUD_PRINTTALK,Ins)
        Time = Interval
    }
    
    if(StraightUp != 0 && Interval == 0)
    {
        holoCreate(1,CPos, 0.1*vec(1,1,1))
        holoCreate(2,CPos, 0.1*vec(1,1,1))
        holoCreate(3,CPos, 0.3*vec(1,1,1))
        holoCreate(4,CPos, 0.3*vec(1,1,1))
        holoCreate(5,CPos, 0.3*vec(1,1,1))
        holoCreate(6,CPos, 0.3*vec(1,1,1))
        holoCreate(7,CPos, 0.3*vec(1,1,1))
        holoCreate(8,CPos, 0.3*vec(1,1,1))
                
        Time = 0
        Pos = Base:pos()
        Cen = CPos + StraightUp * U
        VRL = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,3,4)
        Cen = Cen - VRL[3,number] * R
        Prg = (CPos - Cen):dot(R) * R
        
        PosL = Cen - TrackPieceW * R
        PosR = Cen + TrackPieceW * R
        PosU = CPos + TrackPieceH * U
        PosD = CPos - TrackPieceH * U
        
        ARC = clampTrace(Cen,TrackPieceH,F,U,TrackRangerMaxH,7,8)
        
        holoPos(1,Cen) holoColor(1,vec(255,0,0))
        holoPos(2,Cen + (TrackOriginInset * F)) holoColor(2,vec(255,255,0))
        holoPos(3,PosL) holoColor(3,vec(0,255,0)) holoAng(3,F:toAngle( R)) holoModel(3,"cone")
        holoPos(4,PosR) holoColor(4,vec(0,0,255)) holoAng(4,F:toAngle(-R)) holoModel(4,"cone")
        holoPos(5,PosU) holoColor(5,vec(255,0,255)) holoAng(5,F:toAngle( -U)) holoModel(5,"cone")
        holoPos(6,PosD) holoColor(6,vec(255,0,255)) holoAng(6,F:toAngle(  U)) holoModel(6,"cone")
        holoPos(7,PosU) holoColor(7,vec(255,0,255)) holoAng(7,F:toAngle( -U)) holoModel(7,"cone")
        holoPos(8,PosD) holoColor(8,vec(255,0,255)) holoAng(8,F:toAngle(  U)) holoModel(8,"cone")
                
        print("Rail beam misplacement [Offset/glu] " + Mod)
        print("Rail beam inset [Offset/glu] " + toString(StraightUp))
    }
}

if(Interval > 0)
{
    if(Time <= 0)
    {
        Dev:setColor(255,255,255,255)
        selfDestruct()
        #print(_HUD_PRINTTALK,Dev:massCenter())
        #print(_HUD_PRINTTALK,Dev:pos())
    }
    else
    {
        Time = Time - abs(DF)
    }
}

if(StraightUp != 0 && Interval == 0)
{
    PosL = Cen - TrackPieceW * R
    PosR = Cen + TrackPieceW * R

    VRL = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,0,0)
    VR  = VRL[1,number] , VL  = VRL[2,number], VDM = VRL[3,number]

    VDP = clampTrace(Cen + Prg - TrackOriginInset * F,TrackPieceH,F,U,TrackRangerMaxH,5,6)
    PU = VDP[1,number], PD = VDP[2,number], PDW = VDP[4,number]
  
    VDC = clampTrace(Cen,TrackPieceH,F,U,TrackRangerMaxH,7,8)
    
    # print(VDC[1,number],PU, ARC[1,number])
    
    if((VDC[1,number] < ARC[1,number]) && (VDC[2,number] < ARC[2,number]))
    {
        ARC = VDC
    }
      
    if(isOuter(VL,VR,OutagePercentTolerance,TrackRangerMaxW))
    {
        Time = 10
        Dev:setColor(255,255,255,255)
        while(isOuter(VL,VR,OutagePercentTolerance,TrackRangerMaxW) && (Time > 0))
        {
          Cen = Cen - DF * F
          ALR = clampTrace(Cen,TrackPieceW,F,R,TrackRangerMaxW,0,0), VL = ALR[1,number], VR = ALR[2,number]
          Time = Time - 1
          DF = DF * 1.7
        }
        DF =  0.5 * DF
      #  print(_HUD_PRINTTALK,"Switch!")
    }else{        
        holoPos(1,Cen) holoColor(1,vec(0,255,255))
        # BEGIN Defintition formulas
        
        # Use his for roads
        # PRL = clampTrace(Cen - TrackOriginInset * F ,TrackPieceW,F,R,TrackRangerMaxW,3,4)
        # TrackExtraDepth = ((ARC[1,number] - PU) / 2) + PU
        # TrackExtraSide  = PRL[3,number]
         
        # Use this for 2 beam tracks
         PRL = clampTrace(Cen - TrackOriginInset * F ,0,F,R,TrackRangerMaxW,3,4)
         TrackExtraDepth = ((ARC[1,number] - PU) / 2) + PU
         TrackExtraSide  = PRL[3,number]
        
        #Use ths for monorail
        # PRL = clampTrace(Cen - TrackOriginInset * F ,TrackPieceW,F,R,TrackRangerMaxW,3,4)
        # TrackExtraDepth = ARC[1,number] + ARC[4,number]
        # TrackExtraSide  = PRL[3,number]
        
        # END Defintition formulas
        
        ORG = Cen + TrackPieceH    * U
        ORG = ORG - TrackExtraSide * R
        
        O = round(Base:toLocalAxis(ORG - Base:pos() -(TrackOriginInset * F) + (-TrackExtraDepth)*U ),6)
        A = round(Base:toLocal((F):toAngle(U)))
        
        S = toString(abs(DF)-abs(TrackOriginTolerance)):sub(1,1)
          
        if(S == "-")
        {
            print("Origin: "+toString(O)+" Angle: "+toString(A)+" ["+toString(DF)+"]")
            selfDestruct()
        }
        holoPos(2,Base:pos() + O:rotate(Base:angles()))
        Cen = Cen + DF * F
    }
}
